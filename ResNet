import torch
import torch.nn as nn
import torch.nn.functional as F


# 定义一个基础的卷积块，包括卷积、批量归一化和ReLU激活函数
def conv3x3(in_planes, out_planes, stride=1):
    return nn.Sequential(
        nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False),
        nn.BatchNorm2d(out_planes),
        nn.ReLU(inplace=True)
    )


# 定义一个下采样的卷积块，包括卷积、批量归一化和ReLU激活函数
def conv1x1(in_planes, out_planes, stride=1):
    return nn.Sequential(
        nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False),
        nn.BatchNorm2d(out_planes)
    )


# 定义残差块中的捷径连接
def shortcut(in_planes, out_planes, stride=1):
    if stride == 1 and in_planes == out_planes:
        return nn.Identity()
    else:
        return conv1x1(in_planes, out_planes, stride)


# 定义基本的残差块（用于ResNet18和ResNet34）
class BasicBlock(nn.Module):
    expansion = 1

    def __init__(self, in_planes, planes, stride=1):
        super(BasicBlock, self).__init__()
        self.conv1 = conv3x3(in_planes, planes, stride)
        self.conv2 = conv3x3(planes, planes)
        self.shortcut = shortcut(in_planes, planes * self.expansion, stride)

    def forward(self, x):
        out = self.conv1(x)
        out = self.conv2(out)
        out += self.shortcut(x)
        out = F.relu(out)
        return out


# 定义瓶颈的残差块（用于ResNet50、ResNet101和ResNet152）
class Bottleneck(nn.Module):
    expansion = 4

    def __init__(self, in_planes, planes, stride=1):
        super(Bottleneck, self).__init__()
        self.conv1 = conv1x1(in_planes, planes)
        self.conv2 = conv3x3(planes, planes, stride)
        self.conv3 = conv1x1(planes, planes * self.expansion)
        self.shortcut = shortcut(in_planes, planes * self.expansion, stride)

    def forward(self, x):
        out = F.relu(self.conv1(x))
        out = F.relu(self.conv2(out))
        out = self.conv3(out)
        out += self.shortcut(x)
        out = F.relu(out)
        return out


# 定义ResNet模型
class ResNet(nn.Module):
    def __init__(self, block, num_blocks, num_classes=1000):
        super(ResNet, self).__init__()
        self.in_planes = 64
        self.conv1 = conv3x3(3, 64, stride=2)
        self.layer1 = self._make_layer(block, 64, num_blocks[0], stride=1)
        self.layer2 = self._make_layer(block, 128, num_blocks[1], stride=2)
        self.layer3 = self._make_layer(block, 256, num_blocks[2], stride=2)
        self.layer4 = self._make_layer(block, 512, num_blocks[3], stride=2)
        self.avgpool = nn.AdaptiveAvgPool2d((1, 1))
        self.linear = nn.Linear(512 * block.expansion, num_classes)

    def _make_layer(self, block, planes, num_blocks, stride):
        strides = [stride] + [1] * (num_blocks - 1)
        layers = []
        for stride in strides:
            layers.append(block(self.in_planes, planes, stride))
            self.in_planes = planes * block.expansion
        return nn.Sequential(*layers)

    def forward(self, x):
        out = F.relu(self.conv1(x))
        out = self.layer1(out)
        out = self.layer2(out)
        out = self.layer3(out)
        out = self.layer4(out)
        out = self.avgpool(out)
        out = out.view(out.size(0), -1)
        out = self.linear(out)
        return out


# 定义不同版本的ResNet模型
def resnet18():
    return ResNet(BasicBlock, [2, 2, 2, 2], 1000)


def resnet34():
    return ResNet(BasicBlock, [3, 4, 6, 3], 1000)


def resnet50():
    return ResNet(Bottleneck, [3, 4, 6, 3], 1000)


def resnet101():
    return ResNet(Bottleneck, [3, 4, 23, 3], 1000)


def resnet152():
    return ResNet(Bottleneck, [3, 8, 36, 3], 1000)


# 测试模型
if __name__ == '__main__':
    model = resnet50()
    print(model)

    input = torch.randn(1, 3, 224, 224)
    out = model(input)
    print(out.shape)
